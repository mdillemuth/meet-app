[{"/home/matt/dev/meet-app/src/index.js":"1","/home/matt/dev/meet-app/src/reportWebVitals.js":"2","/home/matt/dev/meet-app/src/App.js":"3","/home/matt/dev/meet-app/src/CitySearch.js":"4","/home/matt/dev/meet-app/src/NumberOfEvents.js":"5","/home/matt/dev/meet-app/src/EventList.js":"6","/home/matt/dev/meet-app/src/Event.js":"7","/home/matt/dev/meet-app/src/api.js":"8","/home/matt/dev/meet-app/src/mock-data.js":"9"},{"size":272,"mtime":1610884844916,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1610263761442,"results":"12","hashOfConfig":"11"},{"size":2784,"mtime":1610884844916,"results":"13","hashOfConfig":"11"},{"size":2077,"mtime":1610884844916,"results":"14","hashOfConfig":"11"},{"size":678,"mtime":1610884844916,"results":"15","hashOfConfig":"11"},{"size":568,"mtime":1610884844916,"results":"16","hashOfConfig":"11"},{"size":2339,"mtime":1610884844916,"results":"17","hashOfConfig":"11"},{"size":3464,"mtime":1610884844916,"results":"18","hashOfConfig":"11"},{"size":2979,"mtime":1610884844916,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ekrb92",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/matt/dev/meet-app/src/index.js",[],["41","42"],"/home/matt/dev/meet-app/src/reportWebVitals.js",[],["43","44"],"/home/matt/dev/meet-app/src/App.js",["45"],"import React, { Component } from 'react';\nimport NumberOfEvents from './NumberOfEvents';\nimport CitySearch from './CitySearch';\nimport EventList from './EventList';\nimport { extractLocations, getEvents, checkToken, getToken } from './api';\nimport './styles/App.scss';\nimport './styles/nprogress.css';\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: [],\n    currentLocation: 'all',\n    numberOfEvents: '24',\n  };\n  // numberOfEvents uses a string to prevent type conversion\n\n  async componentDidMount() {\n    const accessToken = localStorage.getItem('access_token');\n    const validToken =\n      accessToken !== null ? await checkToken(accessToken) : false;\n\n    if (validToken) this.updateEvents();\n\n    this.mounted = true;\n\n    getEvents().then((events) => {\n      if (this.mounted) {\n        this.setState({ events, locations: extractLocations(events) });\n      }\n    });\n    // this.updateEvents();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  // Filters events based on location and number given in user input\n  updateEvents = (location, eventCount) => {\n    const { currentLocation, numberOfEvents } = this.state;\n\n    // If user selects a location from input\n    if (location) {\n      getEvents().then((response) => {\n        // Applies new filter for location\n        const locationEvents =\n          location === 'all'\n            ? response.events\n            : response.events.filter((event) => event.location === location);\n        const events = locationEvents.slice(0, numberOfEvents);\n        const locations = response.locations;\n        return this.setState({\n          events,\n          locations,\n          currentLocation: location,\n        });\n      });\n    }\n    // If user does not select a location, but chooses number of events\n    else {\n      getEvents().then((response) => {\n        // Persists location filter from state\n        const locationEvents =\n          currentLocation === 'all'\n            ? response.events\n            : response.events.filter(\n                (event) => event.location === currentLocation\n              );\n        const events = locationEvents.slice(0, eventCount);\n        const locations = response.locations;\n        return this.setState({\n          events,\n          locations,\n          numberOfEvents: eventCount,\n        });\n      });\n    }\n  };\n\n  render() {\n    const { numberOfEvents, events, locations } = this.state;\n\n    return (\n      <div className='App'>\n        <h1>Meet App</h1>\n        <CitySearch locations={locations} updateEvents={this.updateEvents} />\n        <NumberOfEvents\n          numberOfEvents={numberOfEvents}\n          updateEvents={this.updateEvents}\n        />\n        <EventList events={events} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/home/matt/dev/meet-app/src/CitySearch.js",[],"/home/matt/dev/meet-app/src/NumberOfEvents.js",[],"/home/matt/dev/meet-app/src/EventList.js",[],"/home/matt/dev/meet-app/src/Event.js",[],"/home/matt/dev/meet-app/src/api.js",[],"/home/matt/dev/meet-app/src/mock-data.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"46","replacedBy":"50"},{"ruleId":"48","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":5,"column":51,"nodeType":"54","messageId":"55","endLine":5,"endColumn":59},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],["56"],["57"],"no-unused-vars","'getToken' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]